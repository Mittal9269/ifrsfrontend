{"version":3,"sources":["Components/From/Review2.js"],"names":["Review2","history","useHistory","itemdata","useSelector","state","foodItem","data","formlike","defForm","like","formrating","rating","formComment","Comment","useCookies","cookies","length","window","location","useState","Array","fill","checkedState","setCheckedState","checkRating","setCheckRating","checkComment","setCheckComment","className","class","onSubmit","e","preventDefault","console","log","ratingArr","itemArr","i","push","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setTimeout","defaultData","DidLike","Rating","UserId","ID","RatingFoods","LikeFoods","fetch","process","method","headers","body","JSON","stringify","then","res","json","message","success","catch","err","map","val","index","type","id","name","value","checked","onChange","updatedCheckedState","item","handleOnChange","htmlFor","style","display","flexDirection","classNames","count","updatedRate","ind","size","isHalf","emptyIcon","halfIcon","fullIcon","activeColor","for","placeholder","event","target","rows","cols","maxlength","newestOnTop","rtl","pauseOnFocusLoss"],"mappings":"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","file":"static/js/27.7a313eea.chunk.js","sourcesContent":["import Navbar from \"../Navbar\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport ReactStars from \"react-rating-stars-component\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useHistory } from \"react-router\";\nimport { useCookies } from 'react-cookie';\n\nexport default function Review2() {\n    const history = useHistory();\n    const itemdata = useSelector(state => state.foodItem.data);\n    const formlike = useSelector(state => state.defForm.like)\n    const formrating = useSelector(state => state.defForm.rating)\n    const formComment = useSelector(state => state.defForm.Comment)\n    const [cookies, setCookie] = useCookies(['user']);\n    if (itemdata.length === 0) {\n        window.location = \"/review\";\n    }\n    const [checkedState, setCheckedState] = useState(\n        new Array(itemdata.length).fill(false)\n    );\n    const [checkRating, setCheckRating] = useState(\n        new Array(itemdata.length).fill(0)\n    )\n    const [checkComment, setCheckComment] = useState(\n        new Array(itemdata.length).fill(\"\")\n    )\n\n\n\n    const handleOnChange = (position) => {\n        const updatedCheckedState = checkedState.map((item, index) =>\n            index === position ? !item : item\n        );\n        setCheckedState(updatedCheckedState);\n    }\n\n    const SumitHandler = (e) => {\n        e.preventDefault();\n        console.log(checkComment);\n        let ratingArr = {}, itemArr = [];\n        console.log(checkRating)\n        for (let i = 0; i < itemdata.length; i++) {\n            if (checkRating[i] > 0) {\n                // console.log(itemdata[i] , checkRating[i])\n                ratingArr[itemdata[i]] = [checkRating[i],checkComment[i]];\n            }\n            if (checkedState[i] === true) {\n                itemArr.push(itemdata[i])\n            }\n        }\n        console.log(ratingArr);\n        if (formlike === \"\" || formrating === 0) {\n            toast.error('Error! Try again.', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n            });\n            setTimeout(() => {\n                history.push(\"/review\")\n            }, 2000);\n        }\n        else {\n            let defaultData = {\n                DidLike: formlike === \"Yes\" ? true : false,\n                Rating: formrating,\n                Comment: formComment,\n                UserId:  cookies.ID,\n                RatingFoods: ratingArr,\n                LikeFoods: itemArr\n            }\n            fetch(process.env.REACT_APP_BACKEND + \"/form/form/\", {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(defaultData)\n            }).then(res => res.json())\n                .then((res) => {\n                    if (res.message === \"Form saved successfully\") {\n                        toast.success('Thank you for filling the form', {\n                            position: \"top-center\",\n                            autoClose: 2000,\n                            hideProgressBar: false,\n                            closeOnClick: true,\n                            pauseOnHover: true,\n                            draggable: true,\n                            progress: undefined,\n                        });\n                        setTimeout(() => {\n                            history.push(\"/review\")\n                        }, 2000);\n                    }\n                    else {\n                        toast.error('Error! Please try again', {\n                            position: \"top-center\",\n                            autoClose: 2000,\n                            hideProgressBar: false,\n                            closeOnClick: true,\n                            pauseOnHover: true,\n                            draggable: true,\n                            progress: undefined,\n                        });\n                        setTimeout(() => {\n                            history.push(\"/review\")\n                        }, 2000);\n                    }\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n\n    return (\n        <>\n            <Navbar />\n            <section className=\"mainsectionreview\">\n                <div class=\"page-wrapper p-t-180 p-b-100\">\n                    <div class=\"wrapper wrapper--w960\">\n                        <div class=\"card card-2\">\n                            <div class=\"card-body\">\n                                <h2 class=\"title\">Review Form</h2>\n                                <form onSubmit={SumitHandler}>\n                                    <h4> Please select the food item you like</h4>\n                                    <br />\n                                    <ul className=\"toppings-list\">\n                                        {itemdata !== undefined && itemdata !== null && itemdata.length !== 0 && itemdata.map((val, index) => {\n                                            return (\n                                                <li key={index}>\n                                                    <div className=\"toppings-list-item\">\n                                                        <div className=\"left-section\">\n                                                            <input\n                                                                class=\"form-check form-check-inline\"\n                                                                type=\"checkbox\"\n                                                                id={`custom-checkbox-${index}`}\n                                                                name={val}\n                                                                value={val}\n                                                                checked={checkedState[index]}\n                                                                onChange={() => handleOnChange(index)}\n                                                            />\n                                                            <label htmlFor={`custom-checkbox-${index}`}>{val}</label>\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                            )\n                                        })}\n                                    </ul>\n                                    <br />\n                                    <h4> Rate the food items </h4>\n                                    <br />\n                                    <ul className=\"toppings-list\">\n                                        {itemdata !== null && itemdata !== undefined && itemdata.length !== 0 && itemdata.map((val, index) => {\n                                            return (\n                                                <ul>\n                                                <li key={index} style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                                    <h5 className=\"mr-5\">{val}</h5>\n                                                    <ReactStars\n                                                        classNames=\"ml-5\"\n                                                        count={5}\n                                                        onChange={(value) => {\n                                                            const updatedRate = checkRating.map((item, ind) =>\n                                                                index === ind ? value : item\n                                                            )\n                                                            setCheckRating(updatedRate)\n                                                        }}\n                                                        size={24}\n                                                        isHalf={false}\n                                                        emptyIcon={<i className=\"far fa-star\"></i>}\n                                                        halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n                                                        fullIcon={<i className=\"fa fa-star\"></i>}\n                                                        activeColor=\"#ffd700\"\n                                                    />\n                                                    <br />\n                                                </li>\n                                                <li>\n                                    <div>\n                                        <label for=\"fname\" className=\"left-align2\"><h4>Comments</h4></label><br />\n                                        <textarea\n                                            placeholder=\"Enter Comment\"\n                                            value={checkComment[index]}\n                                            name={val}\n                                            onChange={(event) =>{\n                                                const value  = event.target.value;\n                                                const updatedCheckedState = checkComment.map((item , ind) =>\n                                                        index === ind ? value : item\n                                                    )\n                                                    setCheckComment(updatedCheckedState)\n                                            }}\n                                            rows=\"4\" cols=\"30\" maxlength=\"100\"\n                                        >\n                                        </textarea>\n                                    </div>\n                                </li>\n                                                </ul>\n                                            )\n                                        })}\n                                    </ul>\n                                    <button type=\"submit\" className=\"btn btn-danger\">\n                                        Submit\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <ToastContainer\n                position=\"top-center\"\n                autoClose={2000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </>\n    )\n}"],"sourceRoot":""}